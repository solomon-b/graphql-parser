[ DefinitionTypeSystem
    ( TypeSystemDefinitionSchema
        ( SchemaDefinition
            { _sdDescription = Just Description

                {  unDescription ="A simple GraphQL schema which is well described." }
            , _sdDirectives = Nothing
            , _sdRootOperationTypeDefinitions = RootOperationTypeDefinition
                { _rotdOperationType = OperationTypeQuery
                , _rotdNamedType = "Query"
                } :| []
            }
        )
    )
, DefinitionTypeSystem
    ( TypeSystemDefinitionType
        ( OTDef
            ( ObjectTypeDefinition
                { _otdDescription = Just Description

                    {  unDescription ="Root type for all your query operations" }
                , _otdName = "Query"
                , _otdImplementsInterfaces = Nothing
                , _otdDirectives = Nothing
                , _otdFieldsDefinition = Just
                    ( FieldDefinition
                        { _fldDescription = Just Description

                            {  unDescription ="  Translates a string from a given language into a different language.\n  " }
                        , _fldName = "translate"
                        , _fldArgumentsDefinition =
                            [ InputValueDefinition
                                { _ivdDescription = Just Description

                                    {  unDescription ="The original language that `text` is provided in." }
                                , _ivdName = "fromLanguage"
                                , _ivdType = NamedType "Language"
                                , _ivdDefaultValue = Just
                                    ( VString "The translated language to be returned." )
                                , _ivdDirectives = Nothing
                                }
                            , InputValueDefinition
                                { _ivdDescription = Nothing
                                , _ivdName = "toLanguage"
                                , _ivdType = NamedType "Language"
                                , _ivdDefaultValue = Just
                                    ( VString "The text to be translated." )
                                , _ivdDirectives = Nothing
                                }
                            , InputValueDefinition
                                { _ivdDescription = Nothing
                                , _ivdName = "text"
                                , _ivdType = NamedType "String"
                                , _ivdDefaultValue = Nothing
                                , _ivdDirectives = Nothing
                                }
                            ]
                        , _fldType = NamedType "String"
                        , _fldDirectives = Nothing
                        } :| []
                    )
                }
            )
        )
    )
, DefinitionTypeSystem
    ( TypeSystemDefinitionType
        ( ETDef
            ( EnumTypeDefinition
                { _etdDescription = Just Description

                    {  unDescription ="The set of languages supported by `translate`." }
                , _etdName = "Language"
                , _etdDirectives = Nothing
                , _etdValueDefinitions =
                    [ EnumValueDefinition
                        { _evdDescription = Just Description

                            {  unDescription ="English" }
                        , _evdName = "EN"
                        , _evdDirectives = Nothing
                        }
                    , EnumValueDefinition
                        { _evdDescription = Just Description

                            {  unDescription ="French" }
                        , _evdName = "FR"
                        , _evdDirectives = Nothing
                        }
                    , EnumValueDefinition
                        { _evdDescription = Just Description

                            {  unDescription ="Chinese" }
                        , _evdName = "CH"
                        , _evdDirectives = Nothing
                        }
                    ]
                }
            )
        )
    )
]