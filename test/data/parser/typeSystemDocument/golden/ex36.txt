[ TypeSysDef
    ( SchemaDef
        ( SchemaDefinition
            { sdDescription = Just Description

                {  unDescription ="A simple GraphQL schema which is well described." }
            , sdDirectives = []
            , sdRootOperations = RootOperationTypeDefinition
                { roType = Query
                , roTypeName = "Query"
                } :| []
            }
        )
    )
, TypeSysDef
    ( TypeDef
        ( OTDef
            ( ObjectTypeDefinition
                { objectDescription = Just Description

                    {  unDescription ="Root type for all your query operations" }
                , objectName = "Query"
                , objectInterfaces = Nothing
                , objectDirectives = []
                , objectFields = Just
                    ( FieldDefinition
                        { fieldDefDescription = Just Description

                            {  unDescription ="  Translates a string from a given language into a different language.\n  " }
                        , fieldDefName = "translate"
                        , fieldDefArgumentsDef =
                            [ InputValueDefinition
                                { inputValueDescription = Just Description

                                    {  unDescription ="The original language that `text` is provided in." }
                                , inputValueName = "fromLanguage"
                                , inputValueType = NamedType "Language"
                                , inputValueDefault = Just
                                    ( VString "The translated language to be returned." )
                                , inputValueDirectives = []
                                }
                            , InputValueDefinition
                                { inputValueDescription = Nothing
                                , inputValueName = "toLanguage"
                                , inputValueType = NamedType "Language"
                                , inputValueDefault = Just
                                    ( VString "The text to be translated." )
                                , inputValueDirectives = []
                                }
                            , InputValueDefinition
                                { inputValueDescription = Nothing
                                , inputValueName = "text"
                                , inputValueType = NamedType "String"
                                , inputValueDefault = Nothing
                                , inputValueDirectives = []
                                }
                            ]
                        , fieldDefType = NamedType "String"
                        , fieldDefDirectives = []
                        } :| []
                    )
                }
            )
        )
    )
, TypeSysDef
    ( TypeDef
        ( ETDef
            ( EnumTypeDefinition
                { enumDescription = Just Description

                    {  unDescription ="The set of languages supported by `translate`." }
                , enumName = "Language"
                , enumDirectives = []
                , enumValues =
                    [ EnumValueDefinition
                        { evDescription = Just Description

                            {  unDescription ="English" }
                        , evName = "EN"
                        , evDirectives = []
                        }
                    , EnumValueDefinition
                        { evDescription = Just Description

                            {  unDescription ="French" }
                        , evName = "FR"
                        , evDirectives = []
                        }
                    , EnumValueDefinition
                        { evDescription = Just Description

                            {  unDescription ="Chinese" }
                        , evName = "CH"
                        , evDirectives = []
                        }
                    ]
                }
            )
        )
    )
]